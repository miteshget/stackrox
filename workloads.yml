---
- name: Create objects from templates
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - ./templates/service-account-create.yaml.j2
    - ./templates/service-account-rolebinding.yaml.j2

- name: Get service account token
  command: >-
    oc sa 
    get-token {{ _internal_service_account }}
    -n {{ _internal_service_account_namespace }}
  register: r_token

- name: Set SA token
  set_fact:
    _internal_service_account_token: "{{ r_token.stdout }}"

# Registry
- name: Expose registry
  command: >- 
    oc patch 
    configs.imageregistry.operator.openshift.io/cluster
    --type=merge 
    --patch '{"spec":{"defaultRoute":true}}'

- name: Get route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: openshift-image-registry
  register: r_route

- name: Set image registry route
  set_fact:
    _internal_image_registry_route: "{{ r_route.resources.0.spec.host }}"

- name: Stackrox token
  uri:
    url: "{{ _internal_centeral_stackrox_url }}/v1/apitokens/generate"
    user: admin
    password: "{{ common_password }}"
    method: POST
    force_basic_auth: yes
    validate_certs: false
    body_format: json
    headers:
      Content-Type: application/json
    body: {"name":"admin","role":"Admin"}
  register: r_uri

- name: Set stackrox token
  set_fact:
    _internal_central_stackrox_token: "{{ r_uri.json.token }}"

- debug: 
    var: _internal_service_account_token
    verbosity: 2
- debug:
    var: _internal_image_registry_route
    verbosity: 2

- debug: 
    var: _internal_central_stackrox_token
    verbosity: 2

- name: Create stackrox secret
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/stackrox-token-secret.yaml.j2' ) | from_yaml }}"

- name: Stackrox imagesteam integration
  uri:
    url: "{{ _internal_centeral_stackrox_url }}/v1/imageintegrations"
    user: admin
    password: "{{ common_password }}"
    method: POST
    force_basic_auth: yes
    validate_certs: false
    body_format: json
    headers:
      Content-Type: application/json
    body: >-
      {
      "name": "registry-admin-{{ guid }}",
      "type": "docker",
      "categories": ["REGISTRY"],
      "docker": {
      "endpoint": "{{ _internal_image_registry_route }}",
      "username": "{{ _internal_service_account }}",
      "password": "{{ _internal_service_account_token }}",
      "insecure": true
      },
      "skipTestIntegration": false
      }


